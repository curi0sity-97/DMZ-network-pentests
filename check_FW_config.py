# @authors Philipp, Marco
# Execute this script on any client to see which hosts/interfaces it can reach

from scapy.all import *
from scapy.layers.inet import TCP, IP
import socket
import yaml


# Timeout (sec) for ping requests (higher values increase reliability)
# ---------------------------------------------------------------------------------------------------------------------
TIMEOUT = 1
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)


# Setting network components and addresses from config file
# ---------------------------------------------------------------------------------------------------------------------
try:
    network_config_file = open(os.path.join(os.path.dirname(__file__), 'network_conf.yaml'))
    network_config = yaml.load(network_config_file, Loader=yaml.FullLoader)
except Exception:
    raise Exception("Provide a valid network_conf.yaml")

pf1_interfaces = network_config["pf1_interfaces"]
pf2_interfaces = network_config["pf2_interfaces"]
routers = network_config["routers"]
hosts = network_config["hosts"]


# Try to get Host ip address automatically. if not possible, user has to specify the host name
# ---------------------------------------------------------------------------------------------------------------------
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('8.8.8.8', 1))  # connect() for UDP doesn't send packets
    host_ip = s.getsockname()[0]
except Exception:
    while True:
        input_value = input(f'Enter hostname: {str(list(hosts.keys()))}\n')
        if input_value in hosts.keys():
            host_ip = hosts[input_value]
            break

host_name = list(hosts.keys())[list(hosts.values()).index(host_ip)]
print(f"Hostname: {host_name}, ip address: {host_ip}\n")


# Build up dict of hosts to check (+Internet, -Host)
# ---------------------------------------------------------------------------------------------------------------------
ping_hosts = {}
ping_hosts.update({"Internet": "8.8.8.8"})
ping_hosts.update(pf1_interfaces)
ping_hosts.update(pf2_interfaces)
ping_hosts.update(routers)
ping_hosts.update(hosts)
del ping_hosts[host_name]


# Send ICMP message to every host and check if there is a response
# ---------------------------------------------------------------------------------------------------------------------
for if_name, target in ping_hosts.items():
    packet = IP(dst=target)/ICMP()
    response = sr1(packet, packet, timeout=TIMEOUT, verbose=0)
    if response is None:
        print(f"{if_name} ({target}) is NOT reachable")
    else:
        print(f"{if_name} ({target}) is reachable")

