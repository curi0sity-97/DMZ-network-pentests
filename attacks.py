# @authors Philipp, Marco

from scapy.all import *
from scapy.layers.inet import TCP, IP
import socket
import yaml


TIMEOUT = 1
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

# Setting network components and addresses from config file
# ---------------------------------------------------------------------------------------------------------------------
def get_name(ip_address):
    for group, hosts in network_components.items():
        if ip_address in hosts.values():
            return f"{list(hosts.keys())[list(hosts.values()).index(ip_address)]} ({group})"


# Setting network components and addresses from config file
# ---------------------------------------------------------------------------------------------------------------------
def sweep_network(network_address):
    answered = list()
    # Sending multiple requests at the same time in order to improve speed
    ans, unans = sr(IP(dst=network_address.replace("*", "1-255"))/ICMP(), timeout=2)

    # Iterate over the requests that were answered
    for snd, rcv in ans:
        # Get the address of the host that replied
        answered.append(rcv.src)
    return answered


# Setting network components and addresses from config file
# ---------------------------------------------------------------------------------------------------------------------
def scan_ports(target):
    print(f"Scanning: {target}")
    for port in range(1, 50):
    # for port in [20, 21, 22, 69, 80, 433]:
        packet = IP(dst=target) / TCP(dport=port, flags="S")
        response = sr1(packet, timeout=1, verbose=0)
        if response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12: # SYN-ACK.
            print("   " + str(port) + " , port open!")
            sr(IP(dst=target) / TCP(dport=response.sport, flags="R"), timeout=2, verbose=0)


try:
    network_config_file = open(os.path.join(os.path.dirname(__file__), 'network_conf.yaml'))
    network_config = yaml.load(network_config_file, Loader=yaml.FullLoader)
except Exception:
    raise Exception("Provide a valid network_conf.yaml")

network_components = network_config["network_components"]

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('8.8.8.8', 1))  # connect() for UDP doesn't send packets
    host_ip = s.getsockname()[0]
except Exception:
    while True:
        input_value = input(f'Enter hostname: {str(list(network_components["hosts"].keys()))}\n')
        if input_value in network_components["hosts"].keys():
            host_ip = network_components["hosts"][input_value]
            break

host_name = list(network_components["hosts"].keys())[list(network_components["hosts"].values()).index(host_ip)]


# Execute this script on any client to see which hosts/interfaces it can reach

def udp_flood(target):
    send(IP(dst=target) / UDP(dport=69), loop=1, inter=0.05)
    #send(IP(dst="192.168.10.45") / UDP(dport=69) / Raw(load="abc"), loop=1, inter=0.05)


stop_script = False
while not stop_script:
    print(f'##########################################################\n'
          f'Welcome "{host_name}" ({host_ip})! What would you like to do?\n')
    print('0: Check network components,   "[--check]"\n'
          f'1: IP-Sweep ({network_components["nw_address"]}),   "[--sweep]"\n'
          f'2: IP-Sweep WITH port-scan "[--sweep -p]"\n'
          f'3: ICMP flood hosts  "[--icmpflood <host-address>]"\n'
          f'3: UDP flood hosts  "[--udpflood <host-address>]"\n')

    input_value = input('Enter command:')

    if input_value == '--sweep':
        print('##########################################################\n\n\n'
              "IP Sweep:\nSending ICMP request to 255 addresses in network '192.168.10.*'\nThis might take a while\n")
        answered = sweep_network(network_components["nw_address"])
        for host in set(answered):
            print(f"{host} Replied! {get_name(host)}")

    if input_value == '--sweep -p':
        print('##########################################################\n\n\n'
              "IP Sweep:\nSending ICMP request to 255 addresses in network '192.168.10.*'\nThis might take a while\n")
        answered = sweep_network(network_components["nw_address"])
        print("\n")
        for host in set(answered):
            print(f"{host} Replied! {get_name(host)}")
            scan_ports(host)
        stop_script = True

    if input_value == '--port':
        print('##########################################################\n\n\n'
              "Port Scan:\n\n")
        scan_ports("192.168.10.45")
        # scan_ports("192.168.10.45")

    if input_value == '--udp':
        udp_flood("192.168.10.45")

